from PyPDF2 import PdfReader, PdfWriter
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import textwrap
import io, os, configparser
from backend import shared, bottom_widget_handling
global cross, base_path

config_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "config", "config.ini"))
config = configparser.ConfigParser()
config.read(config_path)
print(f"PATH = {config_path}")

rtgs_path = config.get('Bank', 'RTGS_path').split(',')
rtgs_filled = config.get('Bank', 'RTGS_filled').split(',')

def line_wrapper(c, x1, x2, y, y1, value, wide):
    wrapper = textwrap.TextWrapper(width=wide)
    if value is not (None or ''):
        print(f"VALUE = {value}")
        lines = wrapper.wrap(value)                
        if len(lines) > 1:                      # Split into exactly 2 lines
            first_line = lines[0]
            second_line = " ".join(lines[1:])  # Combine remaining lines into one
        else:
            first_line = lines[0]
            second_line = ""
        c.drawString(x1, y, first_line)
        c.drawString(x2, y - y1, second_line)

def update_rtgs_bank(sel_bank_index, top_widget):   #bank
    file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", rtgs_path[sel_bank_index]))
    filled_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", rtgs_filled[sel_bank_index]))
    print(f"update_rtgs_bank {sel_bank_index} and path = {file_path}")
    
    if ("HDFC" in rtgs_path[sel_bank_index]):
        print ("HDFC data")
        bottom_widget_handling.get_updated_field_data(shared.field_data_hdfc, top_widget)
        field_data = shared.field_data_hdfc
    elif("KAR" in rtgs_path[sel_bank_index]):
        print("KAR bank data")
        bottom_widget_handling.get_updated_field_data(shared.field_data_kar, top_widget)
        field_data = shared.field_data_kar
    elif("Canara" in rtgs_path[sel_bank_index]):
        print("Canara bank data")
        bottom_widget_handling.get_updated_field_data(shared.field_data_canara, top_widget)
        field_data = shared.field_data_canara
    elif("Union" in rtgs_path[sel_bank_index]):
        print("Union Bank data")
        bottom_widget_handling.get_updated_field_data(shared.field_data_union, top_widget)
        field_data = shared.field_data_union
    
    print(f" FIELD {field_data}")
    create_filled_pdf(rtgs_path[sel_bank_index], filled_path, field_data) 

    print(f"Filled form {filled_path}")
    os.startfile(filled_path)
    cross=0
    top_widget.entries[4].setText("Yourself")
    #top_widget.entries[4].setReadOnly(True)
    top_widget.entries[4].setEnabled(False)

    #canvas.delete(line1, text, line2, bearer)
        
def draw_hdfc(c, field_data):
    # Position and text to fill based on field names (you may need to adjust the coordinates)
    for field, value in field_data.items():
        match field:
            case 'rtgs':
                c.drawString(45, 785, value)
            case 'hdfc_cust_name':
                c.drawString(160, 750, value)
            case 'Others':
                c.drawString(525, 700, value)
            case 'time':
                c.drawString(70, 685, value)
            case 'cust_name':
                c.drawString(130,670, value)    
            case 'acct_num':
                c.drawString(100, 650, value)
            case 'chq_num':
                c.drawString(240,650, value)
            case 'mobile':
                c.drawString(100, 635, value)
            #if field == 'addr_remitter':
            #    c.drawString(330, 565, value)
            case 'email':
                c.drawString(380, 550, value)
            case 'cash_dep':
                c.drawString(120, 520, value)
            case 'ben_name':
                c.drawString(85, 490, value)
            case 'ben_addr':
                c.drawString(80, 475, value)
            case 'ben_acct_num':
                c.drawString(160, 460, value)
            case 're-ben_acct_num':
                c.drawString(160, 445, value)
            case 'bank_br':
                c.drawString(150, 425, value)
            case 'ifsc_code':
                c.drawString(400, 425, value)
            case 'acct_type':
                c.drawString(95, 410, value)
            case 'purpose':
                c.drawString(350, 410, value)
            case 'amount':
                c.drawString(200, 330, value)
            case 'in_words':
                #c.drawString(400, 330, value)  
                y = 330
                line_wrapper(c, 400, 60, y, 12, value, 30)
            case 'remarks':
                c.drawString(100, 300, value)

def draw_kar(c, field_data):
    # Position and text to fill based on field names (you may need to adjust the coordinates)
    for field, value in field_data.items():
        match field:
            case 'date':
                c.drawString(475, 755, value)
            case 'PAN':
                c.drawString(450, 740, value)
            case 'bank_br':
                c.drawString(65, 720, value)
            case 'amount':
                c.drawString(340, 685, value)
            case 'in_words':
                #c.drawString(400, 330, value)  
                y = 685 
                line_wrapper(c, 480, 65, y, 15, value,  10)
            case 'acct_num':
                c.drawString(165, 600, value)
            case 'chq_num':
                c.drawString(165, 585, value)
            case 'chq_date':
                c.drawString(430, 580, value)
            case 'cust_name':
                c.drawString(170, 570, value)    
            case 'mobile':
                c.drawString(190, 540, value)
            #if field == 'addr_remitter':
            #    c.drawString(330, 565, value)
            case 'ben_name':
                c.drawString(170, 505, value)
            case 'ben_acct_num':
                c.drawString(170, 485, value)
            case 'acct_type':
                c.drawString(500, 485, value)
            case 'bank_name':
                c.drawString(140, 472, value)
            case 'ifsc_code':
                c.drawString(430, 470, value)
            case 'ben_bank_br':
                c.drawString(150, 455, value)
            #case 'purpose':
            #    c.drawString(350, 410, value)

def draw_canara(c, field_data):
    # Position and text to fill based on field names (you may need to adjust the coordinates)
    for field, value in field_data.items():
        #add space between each letter
        spaced_value = "   ".join(str(value)) if isinstance(value, (str, int)) else value
        match field:
            case 'date':
                spaced_value = "    ".join(str(value)) if isinstance(value, (str, int)) else value
                c.drawString(425, 750, spaced_value)
            case 'PAN':
                c.drawString(400, 730, spaced_value)
            case 'bank_br':
                c.drawString(50, 730, value)
            case 'amount':
                c.drawString(235, 690, value)
            case 'in_words':
                #c.drawString(400, 330, value)  
                y = 690 
                line_wrapper(c, 395, 60, y, 15, value, 30)
            case 'acct_num':
                c.drawString(160, 585, spaced_value)
            case 'chq_num':
                c.drawString(160, 565, spaced_value)
            case 'chq_date':
                c.drawString(410, 565, spaced_value)
            case 'cust_name':
                c.drawString(160, 550, spaced_value)    
            case 'addr_remitter':
                c.drawString(160, 530, spaced_value)
            case 'mobile':
                c.drawString(160, 495, spaced_value)
            case 'ben_name':
                c.drawString(160, 465, spaced_value)
            case 'ben_acct_num':
                c.drawString(160, 445, spaced_value)
            case 're-ben_acct_num':
                c.drawString(160, 430, spaced_value)
            case 'bank_name':
                c.drawString(160, 410, spaced_value)
            case 'ifsc_code':
                c.drawString(160, 375, spaced_value)
            case 'ben_bank_br':
                c.drawString(160, 355, spaced_value)
        #elif field == 'purpose':
        #    c.drawString(350, 410, value)

def draw_union(c, field_data):
    # Position and text to fill based on field names (you may need to adjust the coordinates)
    for field, value in field_data.items():
        #add space between each letter
        spaced_value = "    ".join(str(value)) if isinstance(value, (str, int)) else value
        #if field == 'rtgs':
        #    c.drawString(45, 785, value)
        match field:
            case 'bank_br':
                c.drawString(210,645, value)
            case 'acct_num':
                c.drawString(290, 575, spaced_value)
            case 'cust_name':
                c.drawString(190, 560, spaced_value)
            case 'mobile':
                c.drawString(210,545, spaced_value)    
            case 'PAN':
                c.drawString(120, 530, spaced_value)
            case 'amount':
                c.drawString(120,503, spaced_value)
            case 'exchange':
                c.drawString(300, 503, spaced_value)
            case 'total':
                c.drawString(420, 503, spaced_value)
            case 'in_words':
                #y = 490 
                #line_wrapper(c, 210, 60, y, 2, value,  100)
                if(value):
                    c.drawString(210, 490, value)
            case 'chq_num':
                c.drawString(130, 460, spaced_value)
            case 'chq_date':
                c.drawString(230, 460, spaced_value)
            case 'ben_acct_num':
                c.drawString(175, 428, spaced_value)
            case 'ben_name':
                c.drawString(175, 402, spaced_value)
            case 'ben_addr':
                c.drawString(155, 390, spaced_value)
            case 'bank_name':
                c.drawString(155, 365, spaced_value)
            case 'ben_bank_br':
                c.drawString(155, 348, spaced_value)
            case 'ifsc_code':
                c.drawString(190, 332, spaced_value)
            case 'date':
                c.drawString(100, 270, value)
            #elif field == 'remarks':
            #    c.drawString(100, 300, value)

    
def create_filled_pdf(input_pdf, output_pdf, field_data):
    print(f"INPUT : {input_pdf} and output : {output_pdf}")
    # Create a PDF buffer with reportlab
    packet = io.BytesIO()
    c = canvas.Canvas(packet, pagesize=A4)

    # Set font and size for writing text
    c.setFont("Helvetica", 10)
    print(field_data)

    if field_data['BANK'] == 'hdfc':
        print("Draw HDFC RTGS")
        draw_hdfc(c, field_data)
    elif field_data['BANK'] == 'kar':
        print("Draw Kar RTGS")
        draw_kar(c, field_data)
    elif field_data['BANK'] == 'canara':
        print("Draw Canara RTGS")
        draw_canara(c, field_data)
    elif field_data['BANK'] == 'union':
        print("Draw Union RTGS")
        draw_union(c, field_data)
    
    c.save()

    # Merge the new content (generated with reportlab) onto the original PDF form
    packet.seek(0)
    new_pdf = PdfReader(packet)
    existing_pdf = PdfReader(input_pdf)
    writer = PdfWriter()

    for page in existing_pdf.pages:
        # Merge the new PDF with the old PDF (the original form)
        page.merge_page(new_pdf.pages[0])
        writer.add_page(page)

    # Save the final filled PDF
    try:
        with open(output_pdf, "wb") as output_file:
            writer.write(output_file)
        print("PDF file saved successfully.")
    except PermissionError:
        print("Error: Permission denied. Close the file if it's open and try again.")
    except IOError as e:
        print(f"IO Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

